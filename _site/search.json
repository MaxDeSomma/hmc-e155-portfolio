[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "E155 Portfolio",
    "section": "",
    "text": "Max De Somma is a senior Engineering major at Harvey Mudd College in Claremont, California. At age six, he moved to the Bay Area, 30 minutes north of San Francisco. His academic interests include a mixture of electrical and mechanical design. He currently works in the student machine shop on campus where he helps students and faculty learn how to safely operate heavy machinery. When he is not doing homework or in the shop Max likes riding bikes, swimming, and playing board games."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "E155 Blog",
    "section": "",
    "text": "Jumping into Micro Ps\n\n\n\n\n\nThe first week\n\n\n\n\n\nAug 26, 2024\n\n\nMax De Somma\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "labs/lab1/lab1.html",
    "href": "labs/lab1/lab1.html",
    "title": "Lab 1: FPGA and MCU Setup and Testing",
    "section": "",
    "text": "In this lab we soldered our E155 protoboard, tested our FPGA and MCU, and created our own FPGA design to drive onboard LEDs as well as a seven segment display."
  },
  {
    "objectID": "labs/lab1/lab1.html#introduction",
    "href": "labs/lab1/lab1.html#introduction",
    "title": "Lab 1: FPGA and MCU Setup and Testing",
    "section": "",
    "text": "In this lab we soldered our E155 protoboard, tested our FPGA and MCU, and created our own FPGA design to drive onboard LEDs as well as a seven segment display."
  },
  {
    "objectID": "labs/lab1/lab1.html#development-board",
    "href": "labs/lab1/lab1.html#development-board",
    "title": "Lab 1: FPGA and MCU Setup and Testing",
    "section": "Development Board",
    "text": "Development Board\nFor the development board we were given we soldered a variety of surface mount technology (SMT) and through hole technology (THT) components. The brains behind the development board consisto of the UPduino v3.1 FPGA and Nucleo-L432KC MCU which were attached through header pins. Additionally switches, voltage regulators, and jumpers to set power for the MCU and FPGA were added to the board. The most difficult part was soldering all the SMT leds, capacitors, and resistors as it was tricky to get them in the correct place with how small they were.\n\n\n\nCompleted Development Board"
  },
  {
    "objectID": "labs/lab1/lab1.html#testing-the-fpga-and-mcu",
    "href": "labs/lab1/lab1.html#testing-the-fpga-and-mcu",
    "title": "Lab 1: FPGA and MCU Setup and Testing",
    "section": "Testing the FPGA and MCU",
    "text": "Testing the FPGA and MCU\nThe FPGA and MCU were then tested to make sure they worked properly along with all the soldered components on the PCB. They were able to be test by using the onboard PCB LEDs which connect internally to specific pins of the FPGA and MCU. For my board I found that three of my LEDS and one of the current limiting resistors needed to be reflowed. However after reflowing, and using Radiant to program the FPGA and Segger to program the MCU it worked worked succesfully.\n\n\n\nOn board LEDs used to test the FPGA and MCU"
  },
  {
    "objectID": "labs/lab1/lab1.html#fpga-design",
    "href": "labs/lab1/lab1.html#fpga-design",
    "title": "Lab 1: FPGA and MCU Setup and Testing",
    "section": "FPGA Design",
    "text": "FPGA Design\n\nLab Description\nAfter I had thoroughly tested that my FPGA, MCU, and development board, I designed FPGA modules to control different LEDs. The task was to light up the LED’s and a seven segment display depending on what dip switches were selected, described more in the table below.\n\n\n\nSignal Name\nSignal Type\nDescription\n\n\n\n\ns[3:0]\ninput\nthe four DIP switches (on the board, SW6)\n\n\nled[2:0]\noutput\n3 LEDs (you may use the on-board LEDs)\n\n\nseg[6:0]\noutput\nthe segments of a common-anode 7-segment display\n\n\n\nTwo of the LEDs, led[0] and led[1], were designed accordingly:\n\n\n\n\ns1\ns0\nled[0]\n\n\n\n\n0\n0\n0\n\n\n0\n1\n1\n\n\n1\n0\n1\n\n\n1\n1\n0\n\n\n\n\n\n\n\n\ns3\ns2\nled[1]\n\n\n\n\n0\n0\n0\n\n\n0\n1\n0\n\n\n1\n0\n0\n\n\n1\n1\n1\n\n\n\n\nled[2] did not follow a truth table but instead was designed to blink at 2.4 Hz.\nAs for the seven segment display it needs to read in the dip switch signals and display the four bit binary number as a single hexadecimal number on the seven segment display. For example if the dip switch input s[3:0] was 0110 the seven segment display must show a 6 while if it was 1101 it would display a d.\n\nDesign\nBelow is the block diagram used to design the combinational logic that that drove both the LEDs and seven segment display:\n\n\nLED Design\nTo design led[0] and led[1] we can clearly see that led[0] is simply an exclusive or (XOR gate) of input s0 and s1. While led[1] is an and gate of s2 and s3. For led[2] it was necessary to make sure it blinked at 2.4 Hz. This means that every cycle of led[2] will last around 0.4167 seconds. Using a duty cycle of 50%, the LED needs to switch on or off every 0.2083 seconds. The HSOSC library was utilized to create a clock that oscillated at 48 Mhz meaning it ticks every 2.083*10^-8 seconds. This meant that it would take 10^8 ticks to complete a half cycle for led[3]. To design this a flip flop was used that counts every tick and switched the led on or off every 10,000,000 counts.\n\n\nSeven Segment Design\nTo design the seven segment display the SystemVerilog module used a submodule which had an input of s[3:0] and an output of seg[6:0]. This submodule comntained a case statement with 16 cases, one for each off the possible dip switch combinations (4’b000, 4’b0001, … , 4’b1111). Once the SystemVerilog checked the case it would then turn off the specific pins that correlated to the specific segments to create each hexadecimal number. One interesting point about the seven segment display is that it was common annode, meaning it had one common pin at 3.3V, meaning the FPGA must drive the desired pin to low to light up the particular segment.\n\n\n\nTesting\nA test bench was used to test the SystemVerilog code was working according to the proposed design. The testbench ran all 16 cominations of the dip switches and tested the expected led[3:0] and expected seg[6:0] outputs vs what the actual output of the modules would be in simulation.\n// sevenSeg_testvectors.tv\n// Max De Somma\n// mdesomma@g.hmc.edu\n// 9/3/24\n\n// [3:0]s, [2:0]led, [6:0]segment\n0000_000_1000000\n0001_001_1110011\n0010_001_0100100\n0011_000_0100001\n0100_000_0010011\n0101_001_0001001\n0110_001_0001000\n0111_000_1100011\n1000_000_0000000\n1001_001_0000001\n1010_001_0000010\n1011_000_0011000\n1100_010_1001100\n1101_011_0110000\n1110_011_0001100\n1111_010_0001110\nThe test vector file above was the one used in the test bench that had the correct output for every case. Every test passed proving the SystemVerilog code worked correctly.\n\nHowever the test bench fell short as led[2] was not able to be tested which is clear in the photo above. This was due to the fact that the HSOSC libary was not include in model sim. However it was possible to validate it using an oscilloscope proving it oscillated between 0 V and 3.3V at a freq of 2.42 Hz which is clsoe to the desired 2.40 Hz. \n\n\nWiring and Outcome\nAfter writing and testing the SystemVerilog, it was time to connect the LED’s and Seven Segment to my FPGA using the following wiring schematic.\n\nHowever to prevent the seven segment drawing too much current, current limiting resistors were added to all seven seg[7:0] pins targeting 15 mA. On the seven segment data sheet, it stated that the red led segments had a forward voltage of 1.8 V. This meant that voltage across the resistor would be 1.5 V, and thus could use V = IR with a target current of 0.15 mA to calculate R.\n\nAfter finally wiring all the inputs and the output to the FPGA and downloading the SystemVerilog module to the board the development board was succesfully able to drive the seven segment display and display the correct hexadecimal number and proper onboard LEDs. Additionally as shown above the led[2] blinked at the correct 2.4 Hz. This wraped up Lab 1, verifying that the development board worked properly while giving me a chance to design my own FPGA modules. In total this lab took 21 hours.\n\n\n\nThe correct output of led[0] and the Seven Segment displaying 6 for input 4’b0110\n\n\n\n\n\nThe correct output of led[1] and the Seven Segment displaying C for input 4’b110"
  },
  {
    "objectID": "posts/first-post.html",
    "href": "posts/first-post.html",
    "title": "Jumping into Micro Ps",
    "section": "",
    "text": "This week in class we focused mostly on reviewing from E85, which I definitely needed. It was clear to me that I had forgotten quite a bit and was nervous that it wouldn’t come back. Luckily I have started to remember the concepts we talked about in E85 over a year ago but some topics still trip me up such as using non blocking &lt;= vs blocking = assign statements. I think repition and completing the labs will definitetly help with this, and I hope to see how much I can grow on my E85 knowledge throughout this semester.\nOne other thing I have been thinking about during this lab is the differenc between using the FPGA and MCU. In E85 we used the FPGA the first half of the labs and the RISC-V based MCU the second half. I’m wondering what are the strength of the FPGA vs MCU and how to know when to use one instead of the other?"
  }
]