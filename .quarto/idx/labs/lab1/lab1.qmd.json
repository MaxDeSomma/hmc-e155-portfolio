{"title":"Lab 1: FPGA and MCU Setup and Testing","markdown":{"yaml":{"title":"Lab 1: FPGA and MCU Setup and Testing"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\nIn this lab we soldered our e155 protoboard, tested our FPGA and MCU, and finally created our own FPGA desing to drive three LEDs as well as a seven segment display.\n\n## Development Board\nFor the development board we were given a predesigned PCB and we asked to solder a variety of surface mount technology (SMT) and through hole technology (THT) components. The most important devices we added to the protoboard were the UPduino v3.1 FPGA and Nucleo-L432KC MCU which we attached through header pins making them detachable. We also added switches, voltage regulators, and jumpers to set power for the MCU and FPGA. The hardest part was soldering all the SMT leds, capacitors, and resistors as it was tricky to get them in the correct place with how miniscule they were.\n\n![Completed Development Board](images/protoboard.png)\n\n## Testing the FPGA and MCU\nI then tested that both the FPGA and MCU worked properly along with all the soldered components on the PCB. We were able to test by using the onboard PCB LEDs which connect internally to specific pins of the FPGA and MCU. For my board I found that three of my LEDS and one of the current limiting resistors needed to be reflowed. However after reflowing, I used Radiant to program the FPGA and Segger to program the MCU successfully testing my board.\n\n![On board LEDs used to test the FPGA and MCU](images/onBoardLeds.png)\n\n## FPGA Design\n### Lab Description\nAfter I had thoroughly tested that my FPGA, MCU, and proto board worked, I designed some FPGA modules to control some LEDs. The task was to light up three LED's and a seven segment display depedning on what dip switches were selected, described more in the table below. \n\n| Signal  Name | Signal Type | Description |\n|--------------|-------------|-------------|\n| `s[3:0]`  | input| the four DIP switches (on the board, SW6) |\n| `led[2:0]`| output| 3 LEDs (you may use the on-board LEDs) |\n| `seg[6:0]`| output| the segments of a common-anode 7-segment display |\n\nTwo of the LEDs, `led[0]` and `led[1]`, are designed accordingly:\n\n::: {.center-table}\n| `s1` | `s0` | `led[0]` |\n|:----:|:----:|:--------:|\n| 0  | 0  | 0    |\n| 0  | 1  | 1     |\n| 1  | 0  | 1     |\n| 1  | 1  | 0    |\n:::\n\n::: {.center-table}\n| `s3` | `s2` | `led[1]` |\n|:----:|:----:|:--------:|\n| 0    | 0    | 0      |\n| 0    | 1    | 0      |\n| 1    | 0    | 0      |\n| 1    | 1    | 1       |\n:::-\n\nAnd `led[2]` blinks at 2.4 Hz. \n\nAs for the seven segment display it needs to read in the dip switch signals and display the four digit binary number as a single hexadecimal digit on the seven segment display. For example if the dip switch input s is `0110` the seven segment display must show a `6` while if its `1101` it must display a `d`.\n\n### Design\nBelow is my rough block diagram to control both the LEDs and seven segment display:\n\n![](images/lab1BlockDiagram.png)\n\n#### LED Design\n\nTo design `led[0]` and `led[1]` we can clearly see that `led[0]` is simply an exclusive or (XOR gate) with input `s0` and `s1`. While for `led[1]` you can use an and gate with `s2` and `s3`. For the `led[2]` we had to make sure it blinked at 2.4 Hz. This means that every cycle will last around 0.4167 seconds. I decided I wanted a duty cycle of 50% meaning it needs to switch on or off every 0.2083 seconds. To design that I used the HSOSC library to utilize a clock that oscillates at 48 Mhz meaning it ticks every 2.083*10^-8 seconds. I then found that I would need 10^8 ticks to complete a half cycle for my LED. This allowed me to use a flip flop that counts every tick and switched the led on or off every 10,000,000 counts.\n\n#### Seven Segment Design\nTo design the seven segment display I used a submodule which had an input of `s[3:0]` and an output of `seg[6:0]`. This module then had a case statement with 16 cases, one for each off the possible dip switch combinations (4'b000, 4'b0001, ... , 4'b1111). Once the verilog checked the case it would then turn off the specific pins that correlated to the specific segments to create each hexadecimal number. One interesting point about the seven segment display is that it was common annode, meaning it had one common pin at 3.3V and then you drive the other pin to low to light up the particular segment.\n\n### Testing\nTo test my verilog was working according to my design I created and ran a test bench on my system verilog code. The testbench ran all 16 cominations of the dip switches and tested the expected led[3:0] and seg[6:0] vs what the actual outcome was in simulation. \n\n```markdown\n// sevenSeg_testvectors.tv\n// Max De Somma\n// mdesomma@g.hmc.edu\n// 9/3/24\n\n// [3:0]s, [2:0]led, [6:0]segment\n0000_000_1000000\n0001_001_1110011\n0010_001_0100100\n0011_000_0100001\n0100_000_0010011\n0101_001_0001001\n0110_001_0001000\n0111_000_1100011\n1000_000_0000000\n1001_001_0000001\n1010_001_0000010\n1011_000_0011000\n1100_010_1001100\n1101_011_0110000\n1110_011_0001100\n1111_010_0001110\n```\n\nThe test vector file above was the one used in the test bench that had the correct output for every case. Every test passed proving the system verilog code worked correctly. \n\n![](images/testBench.png)\n\nHowever I was not able to test `led[2]` as you might have noted in the test vector file. This was due to the fact that the HSOSC libary was not include in model sim. However I was able to validate it using an oscilloscope proving it oscillates between 0 V and 3.3V at a freq of 2.42 Hz which is clsoe to the desired 2.40 Hz. \n![](images/2.4HzLED.png)\n\n### Wiring and Outcome\nAfter writing and testing my system verilog. It was time to connect the LED's and Seven Segment to my FPGA using the following wiring schematic.\n\n![](images/pinLayout.png)\n\nHowever to prevent the seven segment drawing too much current I added current limiting resistors targeting 15 mA. Looking at the seven segment data sheet I found that the red led segments had a forward voltage of 1.8 V.\n\n![](images/currentLimitingResistor.png)\n\n As you can see above this was used to calculate the resistance needed to set the current at 15 mA resulting in the use of seven 100 Ohm resistors for each segment. \n\n After finally wiring all the inputs and output to the FPGA and downloading the systemVerilog to the board we were able to succesfully ","srcMarkdownNoYaml":"\n\n## Introduction\nIn this lab we soldered our e155 protoboard, tested our FPGA and MCU, and finally created our own FPGA desing to drive three LEDs as well as a seven segment display.\n\n## Development Board\nFor the development board we were given a predesigned PCB and we asked to solder a variety of surface mount technology (SMT) and through hole technology (THT) components. The most important devices we added to the protoboard were the UPduino v3.1 FPGA and Nucleo-L432KC MCU which we attached through header pins making them detachable. We also added switches, voltage regulators, and jumpers to set power for the MCU and FPGA. The hardest part was soldering all the SMT leds, capacitors, and resistors as it was tricky to get them in the correct place with how miniscule they were.\n\n![Completed Development Board](images/protoboard.png)\n\n## Testing the FPGA and MCU\nI then tested that both the FPGA and MCU worked properly along with all the soldered components on the PCB. We were able to test by using the onboard PCB LEDs which connect internally to specific pins of the FPGA and MCU. For my board I found that three of my LEDS and one of the current limiting resistors needed to be reflowed. However after reflowing, I used Radiant to program the FPGA and Segger to program the MCU successfully testing my board.\n\n![On board LEDs used to test the FPGA and MCU](images/onBoardLeds.png)\n\n## FPGA Design\n### Lab Description\nAfter I had thoroughly tested that my FPGA, MCU, and proto board worked, I designed some FPGA modules to control some LEDs. The task was to light up three LED's and a seven segment display depedning on what dip switches were selected, described more in the table below. \n\n| Signal  Name | Signal Type | Description |\n|--------------|-------------|-------------|\n| `s[3:0]`  | input| the four DIP switches (on the board, SW6) |\n| `led[2:0]`| output| 3 LEDs (you may use the on-board LEDs) |\n| `seg[6:0]`| output| the segments of a common-anode 7-segment display |\n\nTwo of the LEDs, `led[0]` and `led[1]`, are designed accordingly:\n\n::: {.center-table}\n| `s1` | `s0` | `led[0]` |\n|:----:|:----:|:--------:|\n| 0  | 0  | 0    |\n| 0  | 1  | 1     |\n| 1  | 0  | 1     |\n| 1  | 1  | 0    |\n:::\n\n::: {.center-table}\n| `s3` | `s2` | `led[1]` |\n|:----:|:----:|:--------:|\n| 0    | 0    | 0      |\n| 0    | 1    | 0      |\n| 1    | 0    | 0      |\n| 1    | 1    | 1       |\n:::-\n\nAnd `led[2]` blinks at 2.4 Hz. \n\nAs for the seven segment display it needs to read in the dip switch signals and display the four digit binary number as a single hexadecimal digit on the seven segment display. For example if the dip switch input s is `0110` the seven segment display must show a `6` while if its `1101` it must display a `d`.\n\n### Design\nBelow is my rough block diagram to control both the LEDs and seven segment display:\n\n![](images/lab1BlockDiagram.png)\n\n#### LED Design\n\nTo design `led[0]` and `led[1]` we can clearly see that `led[0]` is simply an exclusive or (XOR gate) with input `s0` and `s1`. While for `led[1]` you can use an and gate with `s2` and `s3`. For the `led[2]` we had to make sure it blinked at 2.4 Hz. This means that every cycle will last around 0.4167 seconds. I decided I wanted a duty cycle of 50% meaning it needs to switch on or off every 0.2083 seconds. To design that I used the HSOSC library to utilize a clock that oscillates at 48 Mhz meaning it ticks every 2.083*10^-8 seconds. I then found that I would need 10^8 ticks to complete a half cycle for my LED. This allowed me to use a flip flop that counts every tick and switched the led on or off every 10,000,000 counts.\n\n#### Seven Segment Design\nTo design the seven segment display I used a submodule which had an input of `s[3:0]` and an output of `seg[6:0]`. This module then had a case statement with 16 cases, one for each off the possible dip switch combinations (4'b000, 4'b0001, ... , 4'b1111). Once the verilog checked the case it would then turn off the specific pins that correlated to the specific segments to create each hexadecimal number. One interesting point about the seven segment display is that it was common annode, meaning it had one common pin at 3.3V and then you drive the other pin to low to light up the particular segment.\n\n### Testing\nTo test my verilog was working according to my design I created and ran a test bench on my system verilog code. The testbench ran all 16 cominations of the dip switches and tested the expected led[3:0] and seg[6:0] vs what the actual outcome was in simulation. \n\n```markdown\n// sevenSeg_testvectors.tv\n// Max De Somma\n// mdesomma@g.hmc.edu\n// 9/3/24\n\n// [3:0]s, [2:0]led, [6:0]segment\n0000_000_1000000\n0001_001_1110011\n0010_001_0100100\n0011_000_0100001\n0100_000_0010011\n0101_001_0001001\n0110_001_0001000\n0111_000_1100011\n1000_000_0000000\n1001_001_0000001\n1010_001_0000010\n1011_000_0011000\n1100_010_1001100\n1101_011_0110000\n1110_011_0001100\n1111_010_0001110\n```\n\nThe test vector file above was the one used in the test bench that had the correct output for every case. Every test passed proving the system verilog code worked correctly. \n\n![](images/testBench.png)\n\nHowever I was not able to test `led[2]` as you might have noted in the test vector file. This was due to the fact that the HSOSC libary was not include in model sim. However I was able to validate it using an oscilloscope proving it oscillates between 0 V and 3.3V at a freq of 2.42 Hz which is clsoe to the desired 2.40 Hz. \n![](images/2.4HzLED.png)\n\n### Wiring and Outcome\nAfter writing and testing my system verilog. It was time to connect the LED's and Seven Segment to my FPGA using the following wiring schematic.\n\n![](images/pinLayout.png)\n\nHowever to prevent the seven segment drawing too much current I added current limiting resistors targeting 15 mA. Looking at the seven segment data sheet I found that the red led segments had a forward voltage of 1.8 V.\n\n![](images/currentLimitingResistor.png)\n\n As you can see above this was used to calculate the resistance needed to set the current at 15 mA resulting in the use of seven 100 Ohm resistors for each segment. \n\n After finally wiring all the inputs and output to the FPGA and downloading the systemVerilog to the board we were able to succesfully "},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"lab1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","theme":"cosmo","title":"Lab 1: FPGA and MCU Setup and Testing"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}